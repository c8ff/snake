import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
    id 'application'
    id 'idea'
}

var lwjglVersion = "3.3.6"
var lwjglNatives = "natives-" + (Os.isFamily(Os.FAMILY_WINDOWS) ? "windows" : "linux")

group = 'dev.seeight'
version = '1.0-SNAPSHOT'
mainClassName = "Main"

repositories {
    mavenCentral()
}

dependencies {
    githubImpl "simple-renderer"
    githubImpl "common-lwjgl-stuff"
    githubImpl "various-utils"
    githubImpl "AstraKit"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-nfd"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"

    implementation "com.google.code.gson:gson:2.10.1"
    implementation "org.jetbrains:annotations:24.0.1"
    implementation "org.apache.logging.log4j:log4j:2.20.0"
    implementation "org.apache.logging.log4j:log4j-core:2.20.0"
    implementation "org.reflections:reflections:0.10.2"
    implementation "commons-io:commons-io:2.13.0"
    implementation "org.apache.commons:commons-text:1.10.0"
    implementation "org.joml:joml:1.10.5"
    implementation 'org.slf4j:slf4j-simple:2.0.7'
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

kotlin {
    jvmToolchain(19)
}

void githubImpl(String user = "c8ff", String tag = "latest", String libName) {
    // Get location from 'dumb_libraries' environment variables,
    // Or else, use a local './lib/' path.
    def folder = System.getenv("dumb_libraries") ?: "./lib"
    // The release URL, including javadoc, jar, and/or sources.
    def repoLoc = "https://github.com/${user}/${libName}/releases/download/${tag}"

    def libPath = "${folder}/${libName}/"
    def urls = [
            "${repoLoc}/${libName}.jar", "${repoLoc}/${libName}-javadoc.jar", "${repoLoc}/${libName}-sources.jar"
    ]

    // Create library path.
    var libDir = file(libPath)
    if (!libDir.exists()) libDir.mkdirs()

    // Download or skip library files.
    for (final def url in urls) {
        def filePath = new File(libDir, url.substring(url.lastIndexOf('/') + 1))

        var file = file(filePath)
        if (file.exists()) {
            continue
        }

        // Download file url.
        new URL(url).withInputStream { input -> file.withOutputStream { out -> out << input }}
    }

    // Add to dependencies.
    this.dependencies {
        implementation fileTree(dir: "${folder}/${libName}", include: ['*.jar'])
    }
}